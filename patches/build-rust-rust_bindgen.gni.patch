diff --git a/build/rust/rust_bindgen.gni b/build/rust/rust_bindgen.gni
index 9d72169ba16b9125a53aef6ee1f8e412ced24000..0661cffb56a29f9c66ea8a5710ed4b5324abed2c 100644
--- a/build/rust/rust_bindgen.gni
+++ b/build/rust/rust_bindgen.gni
@@ -11,18 +11,18 @@ if (is_win) {
   import("//build/toolchain/win/win_toolchain_data.gni")
 }
 
-_rustc_base_path = rust_sysroot
-
-# TODO(danakj): When we're using the Android prebuilt toolchain, there's no
-# bindgen present. bindgen is for the host platform so using the linux one will
-# work.
-if (!use_chromium_rust_toolchain) {
-  _rustc_base_path = "//third_party/rust-toolchain"
+_bindgen_path = "${rust_bindgen_root}/bin/bindgen"
+if (is_win) {
+  _bindgen_path = "${_bindgen_path}.exe"
 }
 
-_bindgen_path = "${_rustc_base_path}/bin/bindgen"
+# On Windows, the libclang.dll is beside the bindgen.exe, otherwise it is in
+# ../lib.
+_libclang_path = rust_bindgen_root
 if (is_win) {
-  _bindgen_path = "${_bindgen_path}.exe"
+  _libclang_path += "/bin"
+} else {
+  _libclang_path += "/lib"
 }
 
 # Template to build Rust/C bindings with bindgen.
@@ -79,16 +79,6 @@ template("rust_bindgen") {
     depfile = "$target_out_dir/${target_name}.d"
     outputs = [ out_gen_rs ]
 
-    lib_path = ""
-    if (is_linux) {
-      # Linux clang, and clang libs, use a shared libstdc++, which we must
-      # point to.
-      clang_ld_path = rebase_path(clang_base_path + "/lib", root_build_dir)
-      lib_path += "${clang_ld_path}:"
-    }
-    rust_ld_path = rebase_path(_rustc_base_path + "/lib", root_build_dir)
-    lib_path += "${rust_ld_path}"
-
     args = [
       "--exe",
       rebase_path(_bindgen_path),
@@ -98,10 +88,19 @@ template("rust_bindgen") {
       rebase_path(depfile, root_build_dir),
       "--output",
       rebase_path(out_gen_rs, root_build_dir),
-      "--ld-library-path",
-      lib_path,
+      "--libclang-path",
+      rebase_path(_libclang_path, root_build_dir),
     ]
 
+    if (is_linux) {
+      # Linux clang, and clang libs, use a shared libstdc++, which we must
+      # point to.
+      args += [
+        "--ld-library-path",
+        rebase_path(clang_base_path + "/lib", root_build_dir),
+      ]
+    }
+
     if (defined(invoker.bindgen_flags)) {
       args += [ "--bindgen-flags" ]
       foreach(flag, invoker.bindgen_flags) {
@@ -177,7 +176,7 @@ template("rust_bindgen") {
       ]
     }
 
-    if (!is_cfi) {
+    if (is_cfi) {
       # LLVM searches for a default CFI ignorelist at (exactly)
       # $(cwd)/lib/clang/$(llvm_version)/share/cfi_ignorelist.txt
       # Even if we provide a custom -fsanitize-ignorelist, the absence
