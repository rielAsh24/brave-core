diff --git a/build/toolchain/gcc_toolchain.gni b/build/toolchain/gcc_toolchain.gni
index ad994319cd6fea3ef8d9386353353d6a0b2247a8..516f4add970b1f627927c942cc131a773c68a958 100644
--- a/build/toolchain/gcc_toolchain.gni
+++ b/build/toolchain/gcc_toolchain.gni
@@ -108,9 +108,9 @@ if (enable_resource_allowlist_generation) {
 #      all shared libraries and executables as they are built. The pre-stripped
 #      artifacts will be put in lib.unstripped/ and exe.unstripped/.
 #
-# Callers will normally want to invoke "gcc_toolchain" instead, which makes
-# a toolchain just like this but may additionally create an extra toolchain
-# without sanitizers for host-side tools.
+# Callers will normally want to invoke "gcc_toolchain" instead, which makes an
+# additional toolchain for Rust targets that are build-time artificts such as
+# proc macros.
 template("single_gcc_toolchain") {
   toolchain(target_name) {
     assert(defined(invoker.ar), "gcc_toolchain() must specify a \"ar\" value")
@@ -149,10 +149,6 @@ template("single_gcc_toolchain") {
       # set on those toolchains.
       host_toolchain = host_toolchain
 
-      # The same applies to the toolchain we use to build Rust procedural
-      # macros, which is probably the same but might have sanitizers disabled.
-      host_toolchain_no_sanitizers = host_toolchain_no_sanitizers
-
       if (!defined(invoker_toolchain_args.v8_current_cpu)) {
         v8_current_cpu = invoker_toolchain_args.current_cpu
       }
@@ -812,8 +808,9 @@ template("single_gcc_toolchain") {
   }
 }
 
-# Makes a single GCC toolchain, or possibly two if we need
-# an equivalent toolchain without sanitizers.
+# Makes a GCC toolchain for the target, and an equivalent toolchain with the
+# prebuilt Rust stdlib for building proc macros (and other for-build-use
+# artifacts).
 template("gcc_toolchain") {
   single_gcc_toolchain(target_name) {
     assert(defined(invoker.toolchain_args),
@@ -829,9 +826,10 @@ template("gcc_toolchain") {
     # toolchains, but presubmit checks require that we explicitly exclude them
   }
 
-  if (using_sanitizer) {
-    # Make an additional toolchain with no sanitizers.
-    single_gcc_toolchain("${target_name}_no_sanitizers") {
+  if (enable_rust && current_toolchain == default_toolchain) {
+    # Make an additional toolchain which uses the prebuilt stdlib shipped with
+    # rustc.
+    single_gcc_toolchain("${target_name}_for_rust_host_build_tools") {
       assert(defined(invoker.toolchain_args),
              "Toolchains must declare toolchain_args")
       forward_variables_from(invoker,
@@ -844,7 +842,12 @@ template("gcc_toolchain") {
       toolchain_args = {
         # Populate toolchain args from the invoker.
         forward_variables_from(invoker.toolchain_args, "*")
-        toolchain_disables_sanitizers = true
+        toolchain_for_rust_host_build_tools = true
+
+        # The host build tools are static release builds to make the Chromium
+        # build faster.
+        is_debug = false
+        is_component_build = false
       }
     }
   }
