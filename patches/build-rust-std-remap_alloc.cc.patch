diff --git a/build/rust/std/remap_alloc.cc b/build/rust/std/remap_alloc.cc
index 7f8aa1d7b6f890d0912b76ca0c2cd408d2d9bf4c..1a9d226dc538230d677f5062bdc72e62f8506987 100644
--- a/build/rust/std/remap_alloc.cc
+++ b/build/rust/std/remap_alloc.cc
@@ -65,13 +65,17 @@
 extern "C" {
 
 #ifdef COMPONENT_BUILD
+#if BUILDFLAG(IS_WIN)
+#define REMAP_ALLOC_ATTRIBUTES __declspec(dllexport) __attribute__((weak))
+#else
 #define REMAP_ALLOC_ATTRIBUTES \
   __attribute__((visibility("default"))) __attribute__((weak))
+#endif
 #else
 #define REMAP_ALLOC_ATTRIBUTES __attribute__((weak))
 #endif  // COMPONENT_BUILD
 
-void* REMAP_ALLOC_ATTRIBUTES __rust_alloc(size_t size, size_t align) {
+REMAP_ALLOC_ATTRIBUTES void* __rust_alloc(size_t size, size_t align) {
   // This mirrors kMaxSupportedAlignment from
   // base/allocator/partition_allocator/partition_alloc_constants.h.
   // ParitionAlloc will crash if given an alignment larger than this.
@@ -114,11 +118,11 @@ void* REMAP_ALLOC_ATTRIBUTES __rust_alloc(size_t size, size_t align) {
   }
 }
 
-void REMAP_ALLOC_ATTRIBUTES __rust_dealloc(void* p, size_t size, size_t align) {
+REMAP_ALLOC_ATTRIBUTES void __rust_dealloc(void* p, size_t size, size_t align) {
   free(p);
 }
 
-void* REMAP_ALLOC_ATTRIBUTES __rust_realloc(void* p,
+REMAP_ALLOC_ATTRIBUTES void* __rust_realloc(void* p,
                                             size_t old_size,
                                             size_t align,
                                             size_t new_size) {
@@ -131,7 +135,7 @@ void* REMAP_ALLOC_ATTRIBUTES __rust_realloc(void* p,
   }
 }
 
-void* REMAP_ALLOC_ATTRIBUTES __rust_alloc_zeroed(size_t size, size_t align) {
+REMAP_ALLOC_ATTRIBUTES void* __rust_alloc_zeroed(size_t size, size_t align) {
   if (align <= alignof(std::max_align_t)) {
     return calloc(size, 1);
   } else {
@@ -141,12 +145,12 @@ void* REMAP_ALLOC_ATTRIBUTES __rust_alloc_zeroed(size_t size, size_t align) {
   }
 }
 
-void REMAP_ALLOC_ATTRIBUTES __rust_alloc_error_handler(size_t size,
+REMAP_ALLOC_ATTRIBUTES void __rust_alloc_error_handler(size_t size,
                                                        size_t align) {
   IMMEDIATE_CRASH();
 }
 
-extern const unsigned char REMAP_ALLOC_ATTRIBUTES
+REMAP_ALLOC_ATTRIBUTES extern const unsigned char
     __rust_alloc_error_handler_should_panic = 0;
 
 }  // extern "C"
