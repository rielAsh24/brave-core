diff --git a/third_party/rust/cxx/chromium_integration/rust_cxx.gni b/third_party/rust/cxx/chromium_integration/rust_cxx.gni
index 4636b2c753fa00a2da780bdd03d06854bf8bc045..99ef3943a27664f91ab09699e628ff0d8ee13510 100644
--- a/third_party/rust/cxx/chromium_integration/rust_cxx.gni
+++ b/third_party/rust/cxx/chromium_integration/rust_cxx.gni
@@ -89,14 +89,13 @@ template("rust_cxx") {
     output_h = "{{source_gen_dir}}/{{source_file_part}}.h"
     output_cc = "{{source_gen_dir}}/{{source_file_part}}.cc"
 
-    # Below we use $host_toolchain_no_sanitizers rather than $host_toolchain.
-    # Usually this is the same thing, but in sanitizer builds,
-    # host_toolchain_no_sanitizers won't have the sanitizers.
-    # In this case, it's fine either way, so we can choose whichever
-    # is the quicker to build, based on sharing C++ dependencies with
-    # $host_toolchain, or sharing Rust dependencies with proc macros
-    # using $host_toolchain_no_sanitizers.
-    cxxbridge_target = "//third_party/rust/cxxbridge_cmd/v1:cxxbridge($host_toolchain_no_sanitizers)"
+    # Below we use $rust_macro_toolchain rather than $host_toolchain since we
+    # are building a standalone Rust target that is not part of the Chromium
+    # production build, and this unblocks it from building while the Chromium
+    # stdlib is still compiling, further freeing up other Rust proc-macro
+    # targets (if they used cxxbridge for some reason).
+    cxxbridge_target =
+        "//third_party/rust/cxxbridge_cmd/v1:cxxbridge($rust_macro_toolchain)"
 
     cxxbridge_out_dir = get_label_info(cxxbridge_target, "root_out_dir")
     cxxbridge_executable = "${cxxbridge_out_dir}/cxxbridge"
